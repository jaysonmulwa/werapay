{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReactGA","initialize","pageview","window","location","pathname","LandingComponentLazy","lazy","HomeComponentLazy","PricingComponentLazy","HomePageTemplate","props","fallback","className","Spinner","style","width","height","color","LandingPageTemplate","PricingPageTemplate","Landing","title","status","Home","Pricing","App","exact","path","component","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAeAA,IAAQC,WADW,kBAEnBD,IAAQE,SAASC,OAAOC,SAASC,UAEjC,IAAMC,EAAuBC,gBAAK,kBAChC,iCAGIC,EAAoBD,gBAAK,kBAAM,sDAE/BE,EAAuBF,gBAAK,kBAChC,gCAGIG,EAAmB,SAACC,GAAD,OACvB,6BACE,kBAAC,WAAD,CACEC,SACE,yBAAKC,UAAU,YACb,kBAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUC,MAAM,cAI7D,kBAACV,EAAD,SAKAW,EAAsB,SAACR,GAAD,OAC1B,6BACE,kBAAC,WAAD,CACEC,SACE,yBAAKC,UAAU,YACb,kBAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUC,MAAM,cAI7D,kBAACZ,EAAD,SAKAc,EAAsB,SAACT,GAAD,OAC1B,6BACE,kBAAC,WAAD,CACEC,SACE,yBAAKC,UAAU,YACb,kBAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUC,MAAM,cAI7D,kBAACT,EAAD,SAKAY,EAAU,kBACd,kBAAC,EAAD,CAAqBC,MAAM,cAAcC,OAAO,cAE5CC,EAAO,kBAAM,kBAAC,EAAD,CAAkBF,MAAM,WAAWC,OAAO,WAEvDE,EAAU,kBACd,kBAAC,EAAD,CAAqBH,MAAM,cAAcC,OAAO,cAkBnCG,E,uKAbX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAWR,IAC/B,kBAAC,IAAD,CAAOO,KAAK,OAAOC,UAAWL,IAC9B,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,U,GAR1BK,aCnEEC,QACW,cAA7B5B,OAAOC,SAAS4B,UAEe,UAA7B7B,OAAOC,SAAS4B,UAEhB7B,OAAOC,SAAS4B,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3de63c16.chunk.js","sourcesContent":["import React, { Component, useState, lazy, Suspense } from \"react\";\nimport {\n  BrowserRouter,\n  Router,\n  Route,\n  Link,\n  withRouter,\n} from \"react-router-dom\";\nimport { Spinner } from \"reactstrap\";\nimport \"./App.css\";\nimport \"./styles.generated.css\";\n\nimport ReactGA from \"react-ga\";\n\nconst trackingId = \"UA-175798173-1\"; // Replace with your Google Analytics tracking ID\nReactGA.initialize(trackingId);\nReactGA.pageview(window.location.pathname);\n\nconst LandingComponentLazy = lazy(() =>\n  import(\"./components/LandingComponent.js\")\n);\n\nconst HomeComponentLazy = lazy(() => import(\"./components/HomeComponent.js\"));\n\nconst PricingComponentLazy = lazy(() =>\n  import(\"./components/PricingComponent.js\")\n);\n\nconst HomePageTemplate = (props) => (\n  <div>\n    <Suspense\n      fallback={\n        <div className=\"centered\">\n          <Spinner style={{ width: \"3rem\", height: \"3rem\" }} color=\"primary\" />\n        </div>\n      }\n    >\n      <HomeComponentLazy />\n    </Suspense>\n  </div>\n);\n\nconst LandingPageTemplate = (props) => (\n  <div>\n    <Suspense\n      fallback={\n        <div className=\"centered\">\n          <Spinner style={{ width: \"3rem\", height: \"3rem\" }} color=\"primary\" />\n        </div>\n      }\n    >\n      <LandingComponentLazy />\n    </Suspense>\n  </div>\n);\n\nconst PricingPageTemplate = (props) => (\n  <div>\n    <Suspense\n      fallback={\n        <div className=\"centered\">\n          <Spinner style={{ width: \"3rem\", height: \"3rem\" }} color=\"primary\" />\n        </div>\n      }\n    >\n      <PricingComponentLazy />\n    </Suspense>\n  </div>\n);\n\nconst Landing = () => (\n  <LandingPageTemplate title=\"LandingPage\" status=\"LandingP\" />\n);\nconst Home = () => <HomePageTemplate title=\"HomePage\" status=\"HomeP\" />;\n\nconst Pricing = () => (\n  <PricingPageTemplate title=\"PricingPage\" status=\"PricingP\" />\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Route exact path=\"/\" component={Landing} />\n          <Route path=\"/home\" component={Landing} />\n          <Route path=\"/app\" component={Home} />\n          <Route path=\"/pricing\" component={Pricing} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}